buildscript {
	ext {
		quertDslVersion = "5.0.0"
	}
}

plugins {
	id 'org.springframework.boot' version '2.6.13'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
	id 'com.google.cloud.tools.jib' version '3.2.1'
	id 'java'
	id 'jacoco'
}

jib {
	from {
		image = "adoptopenjdk/openjdk11"
	}
	to {
		image = "sihookang47/debook"
		tags = ["latest"]
	}
}

group = 'com.sihoo.me'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// JPA
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	// Validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// Spring web
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// Spring webSocket
	implementation 'org.springframework.boot:spring-boot-starter-websocket'

	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// H2
	runtimeOnly 'com.h2database:h2'

	// Spring boot starter
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// Spring Security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	testImplementation 'org.springframework.security:spring-security-test'

	// JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// Spring webflux
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'io.netty:netty-resolver-dns-native-macos:4.1.84.Final:osx-aarch_64'

	// QueryDsl
	implementation 'com.querydsl:querydsl-jpa:5.0.0'
	implementation 'com.querydsl:querydsl-apt:5.0.0'

	// DozerMapper
    implementation 'com.github.dozermapper:dozer-core:6.4.0'

	// jasyptt
	implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.4'
}

tasks.named('test') {
	useJUnitPlatform()
}


def querydslDir = "$buildDir/generated/querydsl"

querydsl {
	jpa = true
	querydslSourcesDir = querydslDir
}

sourceSets {
	main.java.srcDir querydslDir
}

compileQuerydsl{
	options.annotationProcessorPath = configurations.querydsl
}

configurations {
	querydsl.extendsFrom compileClasspath
}
